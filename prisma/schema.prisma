// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comments {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  name      String
  body      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  courseId String?
  course   Courses? @relation(fields: [courseId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model User {
  id       String        @id @default(uuid())
  name     String
  email    String
  phone    String
  progress Int
  courses  Courses[]
  results  ExamResults[]
  Comments Comments[]
}

model Courses {
  id         String      @id @default(uuid())
  title      String
  duration   String
  Lessons    Int
  enrolled   Int
  Language   String
  instractor String
  level      String
  category   String
  rating     Float
  Curriculm  Curriculm[]

  userId   String
  user     User       @relation(fields: [userId], references: [id])
  Comments Comments[]
}

model Curriculm {
  id          String    @id @default(uuid())
  title       String
  description String
  lessons     Lessons[]

  courseId String
  course   Courses @relation(fields: [courseId], references: [id])
}

model Lessons {
  id        String  @id @default(uuid())
  title     String
  duration  Int
  videoUrl  String
  posterUrl String
  pdf       String
  completed Boolean @default(false)
  isexame   Boolean @default(false)

  CurriculmId String
  Curriculm   Curriculm @relation(fields: [CurriculmId], references: [id])

  examId String?
  exam   Exams?  @relation(fields: [examId], references: [id])
}

model Exams {
  id        String        @id @default(uuid())
  title     String
  time      Int
  completed Boolean       @default(false)
  questions Questions[]
  results   ExamResults[]
  Lessons   Lessons[]
}

model Questions {
  id            String   @id @default(uuid())
  question      String
  options       String[]
  correctAnswer String

  examId String
  exam   Exams  @relation(fields: [examId], references: [id])
}

model ExamResults {
  id        String   @id @default(uuid())
  score     Int
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  examId String
  exam   Exams  @relation(fields: [examId], references: [id])
}
